{"version":3,"sources":["actions/index.js","constants/ActionTypes.js","components/TaskForm.js","components/Search.js","components/Sort.js","components/Control.js","components/TaskItem.js","components/TaskList.js","App.js","serviceWorker.js","reducers/tasks.js","reducers/isDisplayForm.js","reducers/itemEditing.js","reducers/filterTable.js","reducers/search.js","reducers/sort.js","reducers/index.js","index.js"],"names":["openForm","isDisplayForm","type","editTask","task","TaskForm","props","onCloseForm","onChange","event","target","name","value","checked","setState","onSave","preventDefault","onSaveTask","state","onClear","status","id","this","itemEditing","nextProps","className","onClick","onSubmit","required","Component","connect","dispatch","actions","Search","e","onSearch","keyword","placeholder","Sort","sortBy","sortValue","onSort","by","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","sort","role","Control","TaskItem","onUpdateStatus","onDeleteTask","onUpdateTask","onOpenForm","onEditTask","index","onToggleForm","TaskList","filter","filterName","filterStatus","onFilterTable","onClearFilter","onClearFilterValue","tasks","filterTable","toLowerCase","indexOf","a","b","elmTasks","map","key","search","App","showForm","onClearTask","onShowForm","isCompleteForm","taskEditing","findIndex","Boolean","window","location","hostname","match","s4","Math","floor","random","toString","substring","randomID","data","JSON","parse","localStorage","getItem","initialState","result","forEach","myReducer","action","editingTask","newTask","push","setItem","stringify","cloneTask","splice","parseInt","combineReducers","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.743f9c19.chunk.js","sourcesContent":["import * as types from './../constants/ActionTypes';\r\n\r\nexport const listAll = () => {\r\n    return {\r\n        type : types.LIST_ALL\r\n    }\r\n}\r\n\r\nexport const saveTask = (task) => {\r\n    return {\r\n        type : types.SAVE_TASK,\r\n        task // task : task\r\n    }\r\n}\r\n\r\nexport const toggleForm = () => {\r\n    return {\r\n        type : types.TOGGLE_FORM,\r\n    }\r\n}\r\n\r\nexport const closeForm = () => {\r\n    return {\r\n        type : types.CLOSE_FORM,\r\n    }\r\n}\r\n\r\nexport const openForm = (isDisplayForm) => {\r\n    return {\r\n        type : types.OPEN_FORM,\r\n        isDisplayForm \r\n    }\r\n}\r\n\r\nexport const updateStatus = (id) => {\r\n    return {\r\n        type : types.UPDATE_STATUS_TASK,\r\n        id // id : id \r\n    }\r\n}\r\n\r\nexport const deleteTask = (id) => {\r\n    return {\r\n        type : types.DELETE_TASK,\r\n        id // id : id \r\n    }\r\n}\r\n\r\nexport const editTask = (task) => {\r\n    return {\r\n        type : types.EDIT_TASK,\r\n        task // task : task\r\n    }\r\n}\r\n\r\nexport const filterTask = (filter) => {\r\n    return {\r\n        type : types.FILTER_TABLE,\r\n        filter // filter : filter -> filterName, filterStatus\r\n    }\r\n}\r\n\r\nexport const clearFilter = (filter) => {\r\n    return {\r\n        type : types.CLEAR_FILTER,\r\n        filter\r\n    }\r\n}\r\n\r\nexport const searchTask = (keyword) => {\r\n    return {\r\n        type : types.SEARCH,\r\n        keyword\r\n    }\r\n}\r\n\r\nexport const sortTask = (sort) => {\r\n    return {\r\n        type : types.SORT,\r\n        sort // sort : sort -> sort.by, sort.value\r\n    }\r\n}","export const LIST_ALL = 'LIST_ALL';\r\nexport const SAVE_TASK = 'SAVE_TASK';\r\nexport const TOGGLE_FORM = 'TOGGLE_FORM';\r\nexport const CLOSE_FORM = 'CLOSE_FORM';\r\nexport const OPEN_FORM = 'OPEN_FORM';\r\nexport const UPDATE_STATUS_TASK = 'UPDATE_STATUS_TASK';\r\nexport const DELETE_TASK = 'DELETE_TASK';\r\nexport const EDIT_TASK = 'EDIT_TASK';\r\nexport const FILTER_TABLE = 'FILTER_TABLE';\r\nexport const CLEAR_FILTER = 'CLEAR_FILTER';\r\nexport const SEARCH = 'SEARCH';\r\nexport const SORT = 'SORT';","import React, { Component }  from 'react';\r\n// import \"./components/bootstrap.css\";\r\nimport { connect } from 'react-redux';\r\nimport * as actions from './../actions/index';\r\nimport \"./../App.css\";\r\n\r\nclass TaskForm extends Component {\r\nconstructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        id: '',\r\n        name: '',\r\n        status: false\r\n    }\r\n}\r\n\r\n  onCloseForm = () => {\r\n      this.props.onCloseForm();\r\n  }\r\n\r\n  onChange = (event) => {\r\n      \r\n      var target = event.target;\r\n      var name = target.name;\r\n      var value = target.type === 'checkbox' ? target.checked : target.value;\r\n      this.setState({\r\n          [name] : value,\r\n      });\r\n  }\r\n\r\n  onSave = (event) => {\r\n    event.preventDefault();\r\n    this.props.onSaveTask(this.state);\r\n    this.onClear();\r\n  }\r\n\r\n  onClear = () => {\r\n     this.setState({\r\n        name: '',\r\n        status: false\r\n     })\r\n }\r\n componentWillMount() {\r\n     if(this.props.itemEditing && this.props.itemEditing.id !== null){\r\n        this.setState({\r\n                id : this.props.itemEditing.id,\r\n                name : this.props.itemEditing.name,\r\n                status : this.props.itemEditing.status\r\n            })\r\n        }else {\r\n            this.onClear();\r\n        }\r\n }\r\n componentWillReceiveProps(nextProps) {\r\n     if(nextProps && nextProps.itemEditing){\r\n         this.setState({\r\n             id : nextProps.itemEditing.id,\r\n             name : nextProps.itemEditing.name,\r\n             status : nextProps.itemEditing.status\r\n         })\r\n     }else {\r\n         this.onClear();\r\n     }\r\n }\r\n\r\n  render() {\r\n      if(!this.props.isDisplayForm) return null;\r\n      var { id } = this.state;\r\n      return (\r\n        <div className=\"panel panel-warning\">\r\n            <div className=\"panel-heading\">\r\n                <h3 className=\"panel-title\">\r\n                    { id !== '' ? 'Cập nhật công việc' : 'Thêm công việc'}\r\n                    <span \r\n                        className=\"fa fa-times-circle text-right \" \r\n                        onClick = {this.onCloseForm}\r\n                    >\r\n                    </span>\r\n                </h3>\r\n            </div>\r\n            <div className=\"panel-body\">\r\n                <form onSubmit={this.onSave}>\r\n                    <div className=\"form-group\">\r\n                        <label>Tên :</label>\r\n                        <input \r\n                            type=\"text\" \r\n                            className=\"form-control\" \r\n                            name=\"name\"\r\n                            value={this.state.name}\r\n                            onChange={this.onChange}\r\n                        />\r\n                    </div>\r\n                    <label>Trạng Thái :</label>\r\n                    <select \r\n                        className=\"form-control\" \r\n                        required=\"required\"\r\n                        name=\"status\"\r\n                        value={this.state.status}\r\n                        onChange={this.onChange}\r\n                    >\r\n                        <option value={true}>Kích Hoạt</option>\r\n                        <option value={false}>Ẩn</option>\r\n                    </select>\r\n                    <br/>\r\n                    <div className=\"text-center\">\r\n                        <button \r\n                            type=\"submit\" \r\n                            className=\"btn btn-warning\"\r\n                        >\r\n                            {id !== '' ? 'Cập nhật' : 'Thêm'}\r\n                        </button>&nbsp;\r\n                        <button \r\n                            type=\"button\" \r\n                            onClick={ this.onClear }\r\n                            className=\"btn btn-danger\"\r\n                        >\r\n                            <span className=\"fa fa-close mr-5\"></span>\r\n                            Hủy Bỏ\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isDisplayForm : state.isDisplayForm,\r\n        itemEditing : state.itemEditing\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n    return {\r\n        onSaveTask : (task) => {\r\n            dispatch(actions.saveTask(task))\r\n        },\r\n        onCloseForm : () => {\r\n            dispatch(actions.closeForm())\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(TaskForm);\r\n","import React, { Component }  from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from './../actions/index';\r\n\r\nclass Search extends Component {\r\n  constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n          keyword : ''\r\n      }\r\n  }\r\n\r\n  onChange = (e) => {\r\n      var target = e.target;\r\n      var name = target.name;\r\n      var value = target.value;\r\n      this.setState({\r\n            [name] : value\r\n      });\r\n  }\r\n\r\n  onSearch = () => {\r\n      this.props.onSearch(this.state.keyword);\r\n  }\r\n\r\n  render() {\r\n      var { keyword } = this.state;\r\n      return (\r\n        <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n            <div className=\"input-group\">\r\n                <input \r\n                    type=\"text\" \r\n                    className=\"form-control\" \r\n                    placeholder=\"Nhập từ khóa...\" \r\n                    name=\"keyword\"\r\n                    value={keyword}\r\n                    onChange={this.onChange}\r\n                />\r\n                <span className=\"input-group-btn\">\r\n                    <button \r\n                        className=\"btn btn-primary\" \r\n                        type=\"button\"\r\n                        onClick={this.onSearch}\r\n                    >\r\n                        <span className=\"fa fa-search mr-5\"></span>Tìm\r\n                    </button>\r\n                </span>\r\n            </div>\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) =>{\r\n    return {};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n    return {\r\n        onSearch : (keyword) => {\r\n            dispatch(actions.searchTask(keyword));\r\n        }\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Search);\r\n\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, { Component }  from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from './../actions/index';\r\n\r\n\r\nclass Sort extends Component {\r\n\r\n \r\n  onClick = (sortBy, sortValue) => {\r\n      \r\n      this.props.onSort({\r\n          by : sortBy,\r\n          value : sortValue\r\n      });\r\n  }\r\n  render() {\r\n      return (\r\n        <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n            <div className=\"dropdown\">\r\n                <button className=\"btn btn-primary dropdown-toggle\" type=\"button\" id=\"dropdownMenu1\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"true\">\r\n                    Sắp Xếp <span className=\"fa fa-caret-square-o-down ml-5\"></span>\r\n                </button>\r\n                <ul className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu1\">\r\n                    <li onClick={ () => this.onClick('name', 1)}>\r\n                        <a \r\n                            className={(this.props.sort.by === 'name' && this.props.sort.value === 1)\r\n                                        ? 'sort_selected' : ''\r\n                            }\r\n                            role=\"button\"\r\n                        >\r\n                            <span className=\"fa fa-sort-alpha-asc pr-5\">\r\n                                Tên A-Z\r\n                            </span>\r\n                        </a>\r\n                    </li>\r\n                    <li onClick={ () => this.onClick('name', -1)}>\r\n                        <a \r\n                            className={(this.props.sort.by === 'name' && this.props.sort.value === -1)\r\n                                        ? 'sort_selected' : ''\r\n                            }\r\n                            role=\"button\"\r\n                        >\r\n                            <span className=\"fa fa-sort-alpha-desc pr-5\">\r\n                                Tên Z-A\r\n                            </span>\r\n                        </a>\r\n                    </li>\r\n                    <li role=\"separator\" className=\"divider\"></li>\r\n                    <li onClick={ () => this.onClick('status', 1)}>\r\n                        <a \r\n                            className={(this.props.sort.by === 'status' && this.props.sort.value === 1)\r\n                                        ? 'sort_selected' : ''\r\n                            }\r\n                            role=\"button\"\r\n                        >\r\n                                Trạng Thái Kích Hoạt\r\n                        </a>\r\n                    </li>\r\n                    <li onClick={ () => this.onClick('status', -1)}>\r\n                        <a \r\n                            className={(this.props.sort.by === 'status' && this.props.sort.value === -1)\r\n                                        ? 'sort_selected' : ''\r\n                            }\r\n                            role=\"button\"\r\n                        >\r\n                                Trạng Thái Ẩn\r\n                        </a>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) =>{\r\n    return {\r\n        sort : state.sort\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n    return {\r\n        onSort : (sort) => { //sort.by sort.value\r\n            dispatch(actions.sortTask(sort));\r\n        }\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Sort);\r\n\r\n","import React, { Component }  from 'react';\r\nimport Search from './Search';\r\nimport Sort from './Sort';\r\n\r\n\r\nclass Control extends Component {\r\n\r\n  render() {\r\n      return (\r\n        <div className=\"row mt-15\">\r\n            {/* Search Component */}\r\n            <Search />\r\n            {/* Sort Component */}\r\n            <Sort />\r\n            \r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default Control;\r\n","import React, { Component }  from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from './../actions/index';\r\n\r\nclass TaskItem extends Component {\r\n\r\n  onUpdateStatus = () => {\r\n      this.props.onUpdateStatus(this.props.task.id);\r\n  }\r\n\r\n  onDeleteTask = () => {\r\n      this.props.onDeleteTask(this.props.task.id);\r\n  }\r\n\r\n  onUpdateTask = () => {\r\n    this.props.onOpenForm();\r\n    this.props.onEditTask(this.props.task);\r\n\r\n  }\r\n\r\n  render() {\r\n      var { index, task } = this.props;\r\n      return (\r\n        <tr>\r\n            <td>{index + 1}</td>\r\n            <td>{task.name}</td>\r\n            <td className=\"text-center\">\r\n                <span \r\n                    className={task.status === true ? \r\n                    \"label label-danger\" : \"label label-success\"}\r\n                    onClick={ this.onUpdateStatus }\r\n                >\r\n                    {task.status === true ? \"Kích hoạt\" : \"Ẩn\"}\r\n                </span>\r\n            </td>\r\n            <td className=\"text-center\">\r\n                <button \r\n                    type=\"button\" \r\n                    className=\"btn btn-warning\"\r\n                    onClick={this.onUpdateTask}\r\n                >\r\n                    <span className=\"fa fa-pencil mr-5\"></span>Sửa\r\n                </button>\r\n                &nbsp;\r\n                <button \r\n                    type=\"button\" \r\n                    className=\"btn btn-danger\"\r\n                    onClick= { this.onDeleteTask }\r\n                >\r\n                    <span className=\"fa fa-trash mr-5\"></span>Xóa\r\n                </button>\r\n            </td>\r\n        </tr>\r\n      );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n    return {\r\n        onUpdateStatus : (id) => {\r\n            dispatch(actions.updateStatus(id));\r\n        },\r\n        onDeleteTask : (id) => {\r\n            dispatch(actions.deleteTask(id));\r\n        },\r\n        onCloseForm : () => {\r\n            dispatch(actions.closeForm());\r\n        },\r\n        onToggleForm : () => {\r\n            dispatch(actions.toggleForm())\r\n        },\r\n        onOpenForm : () => {\r\n            dispatch(actions.openForm())\r\n        },\r\n        onEditTask : (task) => {\r\n            dispatch(actions.editTask(task))\r\n        }\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(TaskItem);\r\n","import React, { Component }  from 'react';\r\nimport TaskItem from './TaskItem';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from './../actions/index';\r\n\r\nclass TaskList extends Component {\r\n  constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n          filterName : '',\r\n          filterStatus : -1 //all : -1, active : 1, deactive : 0\r\n      }\r\n  }\r\n\r\n  onChange = (e) => {\r\n    var target = e.target;\r\n    var name = target.name;\r\n    var value = target.type === 'checkbox' ? target.checked : target.value;\r\n\r\n    var filter = {\r\n       name : name === 'filterName' ? value : this.state.filterName,\r\n        status : name === 'filterStatus' ? value : this.state.filterStatus\r\n    };\r\n    this.props.onFilterTable(filter);\r\n    this.setState({\r\n        [name] : value\r\n    });\r\n  }\r\n\r\n  onClearFilter = () => {\r\n    var filter = {\r\n        name : '',\r\n         status : -1\r\n     };\r\n    this.props.onClearFilterValue(filter);\r\n  }\r\n\r\n  render() {\r\n        var { tasks,filterTable,keyword,sort } = this.props;\r\n        //filter on table\r\n        if(filterTable.name){\r\n            tasks = tasks.filter((task) => {\r\n                return task.name.toLowerCase().indexOf(filterTable.name.toLowerCase()) !== -1\r\n            });\r\n        }\r\n        tasks = tasks.filter((task) => {\r\n                if(filterTable.status === -1)\r\n                return task;\r\n                else {\r\n                    return task.status === (filterTable.status === 1 ? true : false);\r\n                }\r\n            });\r\n        //Search\r\n        if(keyword){\r\n            tasks = tasks.filter((task) => {\r\n                return task.name.toLowerCase().indexOf(keyword.toLowerCase()) !== -1\r\n            });\r\n        }\r\n        //sort\r\n        if(sort.by === 'name') {\r\n            tasks.sort((a,b) => {\r\n                if(a.name > b.name ) return sort.value;\r\n                else if(a.name < b.name) return -sort.value;\r\n                else return 0;\r\n            });\r\n        }else {\r\n            tasks.sort((a,b) => {\r\n                if(a.status > b.status) return -sort.value;\r\n                else if(a.status < b.status) return sort.value;\r\n                else return 0;\r\n            })\r\n        }\r\n        //   var { filterName, filterStatus } = this.state;\r\n        var elmTasks = tasks.map((task, index) => {\r\n            return <TaskItem \r\n                            key={task.id} \r\n                            index={index} \r\n                            task={task} \r\n                            // onDeleteTask = {this.props.onDeleteTask}\r\n                            onUpdateTask = {this.props.onUpdateTask}\r\n                    />\r\n        });\r\n      \r\n      return (\r\n        <table className=\"table table-bordered table-hover\">\r\n            <thead>\r\n                <tr>\r\n                    <th className=\"text-center\">STT</th>\r\n                    <th className=\"text-center\">Tên</th>\r\n                    <th className=\"text-center\">Trạng Thái</th>\r\n                    <th className=\"text-center\">Hành Động</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr>\r\n                    <td>\r\n                        <button \r\n                            type=\"button\" \r\n                            className=\"btn btn-primary\"\r\n                            onClick={ this.onClearFilter }\r\n                        > \r\n                         Clear Filter\r\n                        </button>\r\n                    </td>\r\n                    <td>\r\n                        <input \r\n                            type=\"text\" \r\n                            className=\"form-control\" \r\n                            name=\"filterName\"\r\n                            value={ filterTable.name }\r\n                            onChange={ this.onChange }\r\n                        />\r\n                    </td>\r\n                    <td>\r\n                        <select \r\n                            className=\"form-control\"\r\n                            name=\"filterStatus\"\r\n                            value={ filterTable.status }\r\n                            onChange={ this.onChange }\r\n                        >\r\n                            <option value=\"-1\">Tất Cả</option>\r\n                            <option value=\"0\">Ẩn</option>\r\n                            <option value=\"1\">Kích Hoạt</option>\r\n                        </select>\r\n                    </td>\r\n                    <td></td>\r\n                </tr>\r\n                {/* TaskItem */}\r\n                { elmTasks }\r\n            </tbody>\r\n        </table>\r\n      );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) =>{\r\n    return { \r\n        tasks : state.tasks,\r\n        filterTable : state.filterTable,\r\n        keyword : state.search,\r\n        sort : state.sort\r\n     }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n    return {\r\n        onFilterTable : (filter) => {\r\n            dispatch(actions.filterTask(filter));\r\n        },\r\n        onClearFilterValue : (filter) => {\r\n            dispatch(actions.clearFilter(filter));\r\n        },\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskList);\r\n","import React, { Component }  from 'react';\nimport './App.css';\nimport TaskForm from './components/TaskForm';\nimport Control from './components/Control';\nimport TaskList from './components/TaskList';\n// import { findIndex } from 'lodash';\n// import demo from './tranning/demo';\nimport { connect } from 'react-redux';\nimport * as actions from './actions/index';\n\nclass App extends Component {\n\n    showForm = () => {\n        var { itemEditing } = this.props;\n        if(itemEditing && itemEditing.id !== '') {\n            this.props.onOpenForm();\n        }else {\n            this.props.onToggleForm();\n        }\n        \n        this.props.onClearTask({\n            id : '',\n            name : '',\n            status : false\n        });\n    }\n\n    onShowForm = () => {\n        this.setState({\n            isCompleteForm : true\n        })\n    }\n\n    \n    onUpdateTask = (id) => {\n        var {tasks} = this.state;\n        var index = this.findIndex(id);\n        var taskEditing = tasks[index];\n        this.setState ({\n            taskEditing : taskEditing\n        })\n        this.onShowForm();\n    }\n\n\n    render() {\n\n        var { isCompleteForm } = this.props;\n\n        return (\n            <div className=\"container\">\n                <div className=\"text-center\">\n                    <h1>Quản Lý Công Việc</h1>\n                    <hr/>\n                </div>\n                <div className=\"row\">\n                    <div className={ isCompleteForm ? \"col-xs-4 col-sm-4 col-md-4 col-lg-4\" : \"\" }>\n                        <TaskForm/> \n                    </div>\n                    <div className={ isCompleteForm ? \"col-xs-8 col-sm-8 col-md-8 col-lg-8\" : \"col-xs-12 col-sm-12 col-md-12 col-lg-12\" }>\n                        <button \n                            type=\"button\" \n                            className=\"btn btn-primary\"\n                            onClick={ this.showForm }\n                        >\n                            <span className=\"fa fa-plus mr-5 \"></span>Thêm Công Việc\n                        </button>\n                        {/* Search and Sort */}\n                        <Control />\n                        <div className=\"row mt-15\">\n                            <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n                                {/* TaskList */}\n                                <TaskList />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        isCompleteForm : state.isDisplayForm,\n        itemEditing : state.itemEditing\n    };\n}\n\nconst mapDispatchToProps = (dispatch, props) => {\n    return {\n        onToggleForm : () => {\n            dispatch(actions.toggleForm())\n        },\n        onClearTask : (task) => {\n            dispatch(actions.editTask(task))\n        },\n        onOpenForm : () => {\n            dispatch(actions.openForm())\n        }\n    };\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as types from './../constants/ActionTypes';\r\n\r\n\r\nvar s4 = () => {\r\n    return Math.floor((1+Math.random()) * 0x10000).toString(16).substring(1);\r\n}\r\n\r\nvar randomID = () => {\r\n    return s4() + s4() + s4() + s4() + s4() + s4() + s4() + s4() + s4();\r\n}\r\n\r\nvar data = JSON.parse(localStorage.getItem('tasks'));\r\nvar initialState = data ? data : [];\r\nvar findIndex  = (tasks, id) => {\r\n    var result = -1;\r\n    tasks.forEach((task, index) => {\r\n        if(task.id === id){\r\n            result = index;\r\n        }\r\n    });\r\n    return result;\r\n};\r\n\r\nvar myReducer = (state = initialState, action) => {\r\n    var index = -1;\r\n    switch(action.type){\r\n        case types.LIST_ALL:\r\n            return state;\r\n        case types.SAVE_TASK:\r\n            if(action.task.id){\r\n                index = findIndex( state, action.task.id);\r\n                var editingTask = {...state[index]};\r\n                editingTask.name = action.task.name;\r\n                editingTask.status = (action.task.status === 'true' || action.task.status === true) ? true : false;\r\n                state[index] = editingTask;\r\n            }else{\r\n                var newTask = {\r\n                    id : randomID(),\r\n                    name : action.task.name,\r\n                    status : action.task.status === 'true' ? true : false\r\n                }\r\n                state.push(newTask);\r\n            }\r\n            \r\n            localStorage.setItem('tasks', JSON.stringify(state));\r\n            return [...state];\r\n        case types.UPDATE_STATUS_TASK:\r\n            index = findIndex(state, action.id);\r\n\r\n            var cloneTask = {...state[index]};\r\n            cloneTask.status = !cloneTask.status;\r\n            state[index] = cloneTask;\r\n\r\n            localStorage.setItem('tasks', JSON.stringify(state));\r\n            return [...state];\r\n        case types.DELETE_TASK:\r\n            index = findIndex(state, action.id);\r\n            if(index !== -1) {\r\n                state.splice(index, 1);\r\n            }\r\n            localStorage.setItem('tasks', JSON.stringify(state));\r\n            return [...state];\r\n\r\n        default: return state;\r\n    }\r\n};\r\n\r\nexport default myReducer;","import * as types from '../constants/ActionTypes';\r\n\r\nvar initialState = false; // close form\r\nvar myReducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case types.TOGGLE_FORM:\r\n            return  !state;\r\n        case types.OPEN_FORM:\r\n            return true;\r\n        case types.CLOSE_FORM:\r\n            return false;\r\n        default: return state;\r\n    }\r\n};\r\n\r\nexport default myReducer;","import * as types from '../constants/ActionTypes';\r\n\r\nvar initialState = {\r\n    id: '',\r\n    name: '',\r\n    status: false\r\n}; \r\nvar myReducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case types.EDIT_TASK:\r\n            return  action.task;\r\n        default: return state;\r\n    }\r\n};\r\n\r\nexport default myReducer;","import * as types from '../constants/ActionTypes';\r\n\r\nvar initialState = {\r\n    name : '',\r\n    status : -1\r\n}; \r\nvar myReducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case types.FILTER_TABLE:\r\n            return  {\r\n                name : action.filter.name,\r\n                status : parseInt(action.filter.status, 10)\r\n            }\r\n        case types.CLEAR_FILTER:\r\n            return  {\r\n                name : '',\r\n                status : -1\r\n            };\r\n        default: \r\n            return state;\r\n    }\r\n};\r\n\r\nexport default myReducer; ","import * as types from '../constants/ActionTypes';\r\n\r\nvar initialState = ''; \r\n\r\nvar myReducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case types.SEARCH:\r\n            return  action.keyword;\r\n        default: \r\n            return state;\r\n    }\r\n};\r\n\r\nexport default myReducer; ","import * as types from '../constants/ActionTypes';\r\n\r\nvar initialState = {\r\n    by : 'name',\r\n    value : 1 // 1 : a->z, -1 : z->a \r\n}; \r\n\r\nvar myReducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case types.SORT:\r\n            return  {\r\n                by : action.sort.by,\r\n                value : action.sort.value\r\n            }\r\n        default: \r\n            return state;\r\n    }\r\n};\r\n\r\nexport default myReducer; ","import { combineReducers } from 'redux';\r\nimport tasks from './tasks';\r\nimport isDisplayForm from './isDisplayForm';\r\nimport itemEditing from './itemEditing';\r\nimport filterTable from './filterTable';\r\nimport search from './search';\r\nimport sort from './sort';\r\n\r\nconst myReducer = combineReducers({\r\n    tasks, //tasks : tasks\r\n    isDisplayForm, // isDisplayForm : isDisplayForm\r\n    itemEditing,\r\n    filterTable,\r\n    search,\r\n    sort\r\n});\r\n\r\nexport default myReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n//Store\n\nimport { createStore } from 'redux';\nimport myReducer from './reducers/index';\nimport { Provider } from 'react-redux';\nconst store = createStore(\n    myReducer,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n    );\n\nReactDOM.render(\n  <Provider store={ store }>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}